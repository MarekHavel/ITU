openapi: "3.0.0"
info:
  version: "1"
  title: "CanteenAPI"
  description: "API for Canteens mobile app"
paths:
  /api/auth:
    post:
      summary: "Authentication of a user"
      requestBody:
        required: true
        description: "Authentication details"
        content:
          application/json:
            schema:
              type: "object"
              required:
                - email
                - password
              properties:
                email:
                  type: "string"
                password:
                  type: "string"
      responses:
        200:
          description: "Returns userId for authorization during future comunication"
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: "string"
                    format: "UUID"
        400:
          description: "Authentication unsuccesful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/menu:
    get:
      summary: "Get menu for a specific user at a specific day"
      parameters:
        - name: "token"
          in: "query"
          description: "Authorization token"
          required: true
          schema:
            type: "string"
            format: "UUID"
        - name: "date"
          in: "query"
          description: "Date for the menu, when not specified current date is used"
          required: false
          schema:
            type: "string"
            format: "date"
      responses:
        200:
          description: "Array of dishes for the day"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dishes"
        400:
          description: "Invalid token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/credit:
    get:
      summary: "Get remaining credit"
      parameters:
        - name: "token"
          in: "query"
          description: "Authorization token"
          required: true
          schema:
            type: "string"
            format: "UUID"
      responses:
        200:
          description: "Success, responding with credit remaining"
          content:
            application/json:
              schema:
                properties:
                  credit:
                    type: integer
        400:
          description: "Error, invalid auth token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Charge credit"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              required:
                - token
                - credit
              properties:
                token:
                  type: "string"
                  format: "UUID"
                credit:
                  type: "integer"
      responses:
        200:
          description: "Credit was successfully charged"
        400:
          description: "Invalid token or invalid credit"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/order/create:
    post:
      summary: "Create order"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              required:
                - token
                - dishId
              properties:
                token:
                  type: "string"
                  format: "UUID"
                dishId:
                  type: "integer"
                date: # When not specified, today is used
                  type: "string"
                  format: "date"
      responses:
        200:
          description: "Order was created"
          content:
            application/json:
              schema:
                properties:
                  dishId: # Id of newly created order
                    type: integer
        400:
          description: "Invalid token or no such order available"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/order/delete:
    post:
      summary: "Delete an order"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              required:
                - token
                - orderId
              properties:
                token:
                  type: "string"
                  format: "UUID"
                orderId:
                  type: "integer"
      responses:
        200:
          description: "Order was deleted"
        400:
          description: "Invalid token or no such order"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/user:
    get:
      summary: "Get information about a user"
      parameters:
        - name: "token"
          in: "query"
          description: "Authorization token"
          required: true
          schema:
            type: "string"
            format: "UUID"
      responses:
        200:
          description: "User info"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: "Invalid token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/dish/rating:
    get:
      summary: "Get user's rating for a dish"
      parameters:
        - name: "token"
          in: "query"
          description: "Authorization token"
          required: true
          schema:
            type: "string"
            format: "UUID"
        - name: "dishId"
          in: "query"
          description: "Id of the dish"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: "Success, responding with rating"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rating"
        400:
          description: "Error, invalid auth token or bad dish id or this user hasn't rated the dish yet"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Rate a dish"
      description: "If user already rated, his rating will be overwritten with the new one, otherwise it will be newly created"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              required:
                - token
                - dishId
                - rating
              properties:
                token:
                  type: "string"
                  format: "UUID"
                dishId:
                  type: "integer"
                rating:
                  $ref: "#/components/schemas/Rating"
      responses:
        200:
          description: "Rating has been successfully created/edited"
        400:
          description: "Invalid token or invalid credit"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/dish/rating/general:
    get:
      summary: "Get ratings for a dish"
      description: "Get average rating and at most 10 newest reviews"
      parameters:
        - name: "token"
          in: "query"
          description: "Authorization token"
          required: true
          schema:
            type: "string"
            format: "UUID"
        - name: "dishId"
          in: "query"
          description: "Id of the dish"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: "Success, responding with ratings"
          content:
            application/json:
              schema:
                properties:
                  averageRating:
                    type: number
                    format: float
                    minimum: 0
                    maximum: 5
                  numOfRatings:
                    type: integer
                  reviews:
                    $ref: "#/components/schemas/Reviews"
        400:
          description: "Error, invalid auth token or bad dish id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Dish:
      required:
        - id
        - name
        - category
        - allergens
        - itemsLeft
        - price
        - weight
        - orders
      properties:
        id:
          type: integer
        name:
          type: string
        category:
          type: string
        allergens:
          type: string
        itemsLeft:
          type: integer
        price:
          type: integer
        weight:
          type: integer
        orders:
          type: array
          items: # OrderIds
            type: integer
    Reviews:
      type: array
      items: # Reviews
        type: string
      maxItems: 10
    User:
      required:
        - username
        - email
        - priceCategory
        - canteenName
      properties:
        username:
          type: string
        email:
          type: string
        priceCategory: # Student, external diner
          type: string
        canteenName:
          type: string
    Dishes:
      required:
        - dishes
      properties:
        dishes:
          type: array
          items:
            $ref: "#/components/schemas/Dish"
    # DishDetails: - TODO
    #   properties:
    #     id:
    #       type: integer
    #     name:
    #       type: string
    #     constitutions:
    #       type: string
    #     allergens:
    #       type: string
    #     price:
    #       type: integer
    #     weight:
    #       type: integer
    #     rating:
    #       type: number
    #       minimum: 0
    #       minimum: 5
    Order:
      required:
        - orderId
        - dishId
      properties:
        orderId:
          type: integer
          nullable: false
        dishId:
          type: integer
          nullable: false
    Rating:
      required:
        - rating
      properties:
        rating:
          type: integer
          minimum: 0
          maximum: 5
          nullable: false
        comment:
          type: string
    Error:
      required:
        - code
        - message
      properties:
        code:
          description: "0 = no database, 1 = logic error, 2 = bad request"
          nullable: false
          type: "integer"
        message:
          nullable: false
          type: "string"
